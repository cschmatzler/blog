---
draft: true
title: All online tutorials are utter garbage
date: 2023-07-31
description: |
  Just giving people code snippets to copy and paste removes the main factor needed for actual learning.
---

My favorite tutorials nowadays are the super sophisticated ones that give you a complete development environment, set up
with all the extensions and tools you might possibly want, pre-filled with all the code you could possibly need to understand
whatever it is they are teaching.
So then you go back to your empty editor... and then what?

Online tutorials all suck.  
They only ever focus on the happy path, when our brain learns through repeated failure and working
through the challenges that arise. Cool, your post with six different popups asking me to subscribe to a newsletter can give me
the solution to the exact problem you designed to write about, for a very narrow set of specific circumstances. This is not how
real projects work. I can think of 700 things that might go wrong before getting to a working state, requiring deeper knowledge
of the topic and troubleshooting skills, that are simply not taught.

Actual skill comes from running into issues, learning how to solve them, running into the same issue again approximately eight
times judging yourself for having forgotten the solution from the previous times, and then at some point internalising how everything
is actually functioning so you can deal with upcoming issues more quickly in the future. This entire process is something the author
of a tutorial has gone through. They are sourcing knowledge from their hours, days and years of experience going through failure
and learning about the subject matter, and then only give you the infinitely tiny part of it that is the actual outcome.

This is also exacerbated by the fact that most junior engineers, instead of looking directly at the documentation, tend to search the
internet first, and search engines then often promoting simple, short blogs over linking to documentation. A ton of commonly used languages
and libraries strike a pretty good balance between giving examples of both happy and unhappy paths, and the ones that don't, well, they
deserve to die anyways. At the very least, though, they will most likely link to a repository where you can look at the actual implementation
of the function that is troubling you. Honestly, everyone should have a skim over some of the libraries they're using every once in a while,
followed by questioning their choices in dependencies.

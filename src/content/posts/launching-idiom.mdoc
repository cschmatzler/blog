---
draft: false
title: "Launching Idiom: a new internationalisation library for Elixir"
date: 2023-09-04
description: |
  I ran into some roadblocks when translating a project, so I wrote a thing.
---

I just released the initial public version of [Idiom](https://hex.pm/packages/idiom) and I think it's pretty cool. This is a little write-up on why I wrote it,
what its goals are, and what I want to do with it in the future.

## How we got here

Proper internationalisation a goal that's not easy to achieve. You'll want to target multiple languages, but only few people on your team have deeper knowledge
with each one, and usually there aren't too many languages covered by a single person. This means that the work of translating new parts of our user interfaces
is also spread between multiple people.  
In software engineering, there is a new level of complexity: those translations need to get to our users somehow. Usually, they are stored in a file somewhere,
be it an `.arb`, `.json`, `.po` or whatever else someone once came up with. With our language knowledge spread between multiple people, this results in every
translator either needing to access the repository and files directly, knowing the ins-and-outs of `git` and pull requests, or the messages being stored 
somewhere in Notion, Linear or other platforms waiting to be picked up by an engineer and merged into the repository - the lovely "chore: update translations"
that pops up every other week. On top of that, this all includes a full release and deployment process just to fix a typo.  

We can do better.  

To create an experience that supports both engineers and the people writing copy, an internationalisation library should:

- Be editable outside of the editor while not requiring me to import/export all the time.  
  Text files inside a repository are great for change-tracking and history, but terrible to work with for non-engineers.

- Allow copy updates without re-deploying my application.  
  Pushing a commit with a fix for a simple typo in some copy, having to rebuild the entire application, followed by triggering a new release/deployment is a 
  pain in the ass.

There are great pieces of software that offer a great user interface for managing translations while at the same time supporting over-the-air delivery of 
translations. At the same time, the library should be agnostic to whatever software is used (warning: we're not there yet).

## Introducing Idiom

As you're probably an engineer and only want to see some code without the babbling around it, here you go:

```elixir
# Set the locale
Idiom.put_locale("en-US")

t("landing.welcome")

# With natural language key
t("Hello Idiom!")

# With interpolation
t("Good morning, {{name}}. We hope you are having a great day.", %{name: "Marco"})

# With plural and interpolation
t("You need to buy {{count}} cheese cakes", count: 1)

# With namespace
t("Create your account", namespace: "signup")
Idiom.put_namespace("signup")
t("Create your account")

# With explicit locale
t("Create your account", to: "fr")

# With fallback locale
t("Create your account", to: "fr", fallback: "en")

# With fallback key
t(["Create your account", "Register"], to: "fr")
```

## Being agnostic about backends

Well, soon.  
While the syntax to translate keys inside a module or template is important, arguably more important is how you get your translation into the application.

### `Idiom.Local`

At startup, Idiom reads data from the local file system - yup, there'll still be a `chore: update translations` commit somewhere. Inevitably, whatever backend
you choose to use will be unavailable. This should never result in your users being unable to see any text, though. For that reason, having some version of
the messages locally is important as a fallback. That version might be a little outdated (fewer chores!), but at least it's something. Once an over-the-air
backend is configured and started, the local data will be overwritten with fresh translations.  
If you're interested in directory structure and file format, check out the documentation [here](https://hexdocs.pm/idiom/Idiom.Local.html).

### `Idiom.Backend`

Idiom's data storage is backed by an ETS table that can be updated by any process. To support over-the-air updates, Idiom has the concept of backends: 
`GenServer`s that periodically fetch data from a service and update the cache. This is easily configured by adding

```elixir
config :idiom,
  backend: Idiom.Backend.Phrase
```

to your application configuration. Idiom will automatically launch the configured backend through its `Supervisor`.  
At the time of writing, there is one supported backend: `Idiom.Backend.Phrase`. Maybe, at the time of reading, there are more - they're certainly planned.

#### `Idiom.Backend.Phrase`

Let's add some more lines to your config, shall we?

```elixir
config :idiom, Idiom.Backend.Phrase,
  distribution_id: "", # required
  distribution_secret: "", # required
  locales: ["de-DE", "en-US"], # required
  namespace: "default",
  otp_app: :your_app
```

Configuring the Phrase backend will set up Idiom to fetch all translation data from the Phrase Strings distribution in the configured locales on a specific
time interval, regularly updating the cache. With this done, whoever is in charge of copy in your team can just update something in the Phrase UI, deploy a new
OTA release and watch it show up for users after a few minutes - all without the awkward communication between departments or deploying a new version.

## What's next?

Looking at the published version, it's still `0.5.0` and I wouldn't call it production ready quite yet. If you want to experiment with it and give me feedback
about API, functionality and bugs, I'd really appreciate that, though. For the next few weeks, I have some new features and improvements planned before tagging
it a `1.0`.

### Key extraction

This is actually almost ready already, but I'm about to head out of the country for a wedding and wanted to get this post out before, so it'll be on my bucket
list for the week after. If you have existing messages in your application, you probably at some point want to be able to import them into one of the supported
backends. It's one of `gettext`'s killer features and Idiom will have it, too.  
Stay tuned for `mix idiom.extract`!

### More backends

Calling the library backend agnostic and only launching with a single backend is weird. Before `1.0`, there needs to be support for more backends.

### Ordinal plurals

Internationalisation isn't just about translations - there's a lot more to uncover. One thing that's definitely missing at the moment are ordinal plurals. This
might also result in a breaking change depending on what API I end up liking.

## Thanks and Inspiration

No library is created in isolation. While researching and writing Idiom, there were a lot of looks to the side. A lot of ideas came from 
[gettext](https://hex.pm/packages/gettext), which is the main library in Elixir right now when it comes to internationalisation, [i18next](https://i18next.com)
who I stole the file format from, the [Unicode CLDR Project](https://cldr.unicode.org/index) which is an absolutely invaluable resource, and my team at work
who I forced to give me some feedback early on in development. Y'all are great.
